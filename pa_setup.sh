#!/usr/bin/env bash
set -euo pipefail

# pa_setup.sh
# Automated helper for PythonAnywhere deployment.
# Behavior:
# - If ~/LFIWEB.zip exists, unzip it into ~/LFIWEB
# - Else if ~/LFIWEB is a git repo, pull; otherwise try to clone using REPO_SSH or REPO_HTTPS env vars
# - Create a virtualenv at ~/.virtualenvs/lfiweb-venv (if not exists) and install requirements
# - Initialize the SQLite DB via backend.app.init_db()
# - Create an admin user via backend/create_admin.py (interactive unless ADMIN_EMAIL env var is set)

REPO_DIR="$HOME/LFIWEB"
ZIP_PATH="$HOME/LFIWEB.zip"
TMP_DIR="$HOME/LFIWEB_tmp"
VENV_PATH="$HOME/.virtualenvs/lfiweb-venv"
PYTHON_BIN="python3"

# flags
NONINTERACTIVE=false

for arg in "$@"; do
  case "$arg" in
    --non-interactive)
      NONINTERACTIVE=true
      ;;
    --help|-h)
      echo "Usage: pa_setup.sh [--non-interactive]"
      exit 0
      ;;
  esac
done

echo "Starting pa_setup.sh"

# prefer available python3.x
if command -v python3.11 >/dev/null 2>&1; then
  PYTHON_BIN=python3.11
elif command -v python3.10 >/dev/null 2>&1; then
  PYTHON_BIN=python3.10
elif command -v python3 >/dev/null 2>&1; then
  PYTHON_BIN=python3
fi

echo "Using Python: $(command -v $PYTHON_BIN)"

# Step 1: get the code into $REPO_DIR
if [ -f "$ZIP_PATH" ]; then
  echo "Found $ZIP_PATH — unzipping into $REPO_DIR"
  rm -rf "$TMP_DIR"
  mkdir -p "$TMP_DIR"
  unzip -q "$ZIP_PATH" -d "$TMP_DIR"
  # move contents (handle GitHub archive structure)
  shopt -s dotglob
  mkdir -p "$REPO_DIR"
  moved=0
  for d in "$TMP_DIR"/*; do
    if [ -d "$d" ]; then
      echo "Moving contents of $d to $REPO_DIR"
      mv "$d"/* "$REPO_DIR" || true
      moved=1
      break
    fi
  done
  if [ $moved -eq 0 ]; then
    mv "$TMP_DIR"/* "$REPO_DIR" || true
  fi
  rm -rf "$TMP_DIR"
elif [ -d "$REPO_DIR/.git" ]; then
  echo "$REPO_DIR exists and is a git repo — pulling latest"
  (cd "$REPO_DIR" && git pull --rebase)
else
  # try to clone from env variable
  if [ -n "${REPO_SSH:-}" ]; then
    echo "Cloning via SSH: $REPO_SSH"
    git clone "$REPO_SSH" "$REPO_DIR"
  elif [ -n "${REPO_HTTPS:-}" ]; then
    echo "Cloning via HTTPS: $REPO_HTTPS"
    git clone "$REPO_HTTPS" "$REPO_DIR"
  else
    echo "No archive and no REPO_SSH/REPO_HTTPS provided. Create $REPO_DIR manually or upload $ZIP_PATH and re-run. Exiting."
    exit 1
  fi
fi

cd "$REPO_DIR"
echo "Project directory: $(pwd)"

# Step 2: create virtualenv
if [ ! -d "$VENV_PATH" ]; then
  echo "Creating virtualenv at $VENV_PATH"
  $PYTHON_BIN -m venv "$VENV_PATH"
fi

echo "Activating virtualenv"
# shellcheck source=/dev/null
source "$VENV_PATH/bin/activate"
pip install --upgrade pip

if [ -f "backend/requirements.txt" ]; then
  echo "Installing requirements from backend/requirements.txt"
  pip install -r backend/requirements.txt
else
  echo "No backend/requirements.txt found — skipping pip install"
fi

# Step 3: initialize DB
echo "Initializing the database (calling backend.app.init_db())"
python - <<'PY'
from importlib import import_module
try:
    m = import_module('backend.app')
    if hasattr(m, 'init_db'):
        print('Running init_db()')
        m.init_db()
    else:
        print('backend.app has no init_db(), skipping')
except Exception as e:
    print('Error initializing DB:', e)
    raise
PY

# Step 4: create admin user
if [ "$NONINTERACTIVE" = true ]; then
  echo "Running in --non-interactive mode"
  # generate SECRET_KEY if not provided
  if [ -z "${SECRET_KEY:-}" ]; then
    SECRET_KEY=$(python - <<'PY'
import secrets
print(secrets.token_urlsafe(48))
PY
)
    echo "Generated SECRET_KEY"
  fi

  # ensure ADMIN_EMAIL is set
  if [ -z "${ADMIN_EMAIL:-}" ]; then
    echo "ERROR: ADMIN_EMAIL must be set in --non-interactive mode. Export ADMIN_EMAIL before running."
    exit 2
  fi

  # Write a .pa_env file with recommended exports (user should copy these into Web > Environment variables)
  ENV_FILE="$REPO_DIR/.pa_env"
  cat > "$ENV_FILE" <<EOF
# Environment exports generated by pa_setup.sh --non-interactive
export DB_PATH="$REPO_DIR/backend/data.db"
export SECRET_KEY="$SECRET_KEY"
export SITE_URL="https://yourusername.pythonanywhere.com"
export SESSION_COOKIE_SECURE=True
export ADMIN_EMAIL="$ADMIN_EMAIL"
EOF
  echo "Wrote environment hints to $ENV_FILE"

  echo "Creating admin user non-interactively for ${ADMIN_EMAIL}"
  echo "$ADMIN_EMAIL" | python backend/create_admin.py || true
else
  if [ -n "${ADMIN_EMAIL:-}" ]; then
    echo "Creating admin user non-interactively for ${ADMIN_EMAIL}"
    echo "$ADMIN_EMAIL" | python backend/create_admin.py || true
  else
    echo "No ADMIN_EMAIL provided — running interactive admin creation. Follow prompts."
    python backend/create_admin.py || true
  fi
fi

echo "pa_setup.sh finished. Reminder: set environment variables in the Web tab (DB_PATH, SECRET_KEY, SITE_URL, etc.) and configure WSGI/static files as documented in DEPLOY.md"
